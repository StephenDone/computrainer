// CTdiag.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

   struct ct_load {
	int supplement,
	    load;
   } CTLoadTable[] = { 

    107,0,
    106,1,
    105,2,
    104,3,
    103,4,
    102,5,
    101,6,
    100,7,
    99,8,
    98,9,
    97,10,
    96,11,
    95,12,
    94,13,
    93,14,
    92,15,
    91,16,
    90,17,
    89,18,
    88,19,
    87,20,
    86,21,
    85,22,
    84,23,
    83,24,
    82,25,
    81,26,
    80,27,
    79,28,
    78,29,
    77,30,
    76,31,
    75,32,
    74,33,
    73,34,
    72,35,
    71,36,
    70,37,
    69,38,
    68,39,
    67,40,
    66,41,
    65,42,
    64,43,
    63,44,
    62,45,
    61,46,
    60,47,
    59,48,
    58,49,
    57,50,
    56,51,
    55,52,
    54,53,
    53,54,
    52,55,
    51,56,
    50,57,
    49,58,
    48,59,
    47,60,
    46,61,
    45,62,
    44,63,
    43,64,
    42,65,
    41,66,
    40,67,
    39,68,
    38,69,
    37,70,
    36,71,
    35,72,
    34,73,
    33,74,
    32,75,
    31,76,
    30,77,
    29,78,
    28,79,
    27,80,
    26,81,
    25,82,
    24,83,
    23,84,
    22,85,
    21,86,
    20,87,
    19,88,
    18,89,
    17,90,
    16,91,
    15,92,
    14,93,
    13,94,
    12,95,
    11,96,
    10,97,
    9,98,
    8,99,
    7,100,
    6,101,
    5,102,
    4,103,
    3,104,
    2,105,
    1,106,
    0,107,
    255,108,
    254,109,
    253,110,
    252,111,
    251,112,
    250,113,
    249,114,
    248,115,
    247,116,
    246,117,
    245,118,
    244,119,
    243,120,
    242,121,
    241,122,
    240,123,
    239,124,
    238,125,
    237,126,
    236,127,
    235,128,
    234,129,
    233,130,
    232,131,
    231,132,
    230,133,
    229,134,
    228,135,
    227,136,
    226,137,
    225,138,
    224,139,
    223,140,
    222,141,
    221,142,
    220,143,
    219,144,
    218,145,
    217,146,
    216,147,
    215,148,
    214,149,
    213,150,
    212,151,
    211,152,
    210,153,
    209,154,
    208,155,
    207,156,
    206,157,
    205,158,
    204,159,
    203,160,
    202,161,
    201,162,
    200,163,
    199,164,
    198,165,
    197,166,
    196,167,
    195,168,
    194,169,
    193,170,
    192,171,
    191,172,
    190,173,
    189,174,
    188,175,
    187,176,
    186,177,
    185,178,
    184,179,
    183,180,
    182,181,
    181,182,
    180,183,
    179,184,
    178,185,
    177,186,
    176,187,
    175,188,
    174,189,
    173,190,
    172,191,
    171,192,
    170,193,
    169,194,
    168,195,
    167,196,
    166,197,
    165,198,
    164,199,
    163,200,
    162,201,
    161,202,
    160,203,
    159,204,
    158,205,
    157,206,
    156,207,
    155,208,
    154,209,
    153,210,
    152,211,
    151,212,
    150,213,
    149,214,
    148,215,
    147,216,
    146,217,
    145,218,
    144,219,
    143,220,
    142,221,
    141,222,
    140,223,
    139,224,
    138,225,
    137,226,
    136,227,
    135,228,
    134,229,
    133,230,
    132,231,
    131,232,
    130,233,
    129,234,
    128,235,
    127,236,
    126,237,
    125,238,
    124,239,
    123,240,
    122,241,
    121,242,
    120,243,
    119,244,
    118,245,
    117,246,
    116,247,
    115,248,
    114,249,
    113,250,
    112,251,
    111,252,
    110,253,
    109,254,
    108,255,
    106,256,
    105,257,
    104,258,
    103,259,
    102,260,
    101,261,
    100,262,
    99,263,
    98,264,
    97,265,
    96,266,
    95,267,
    94,268,
    93,269,
    92,270,
    91,271,
    90,272,
    89,273,
    88,274,
    87,275,
    86,276,
    85,277,
    84,278,
    83,279,
    82,280,
    81,281,
    80,282,
    79,283,
    78,284,
    77,285,
    76,286,
    75,287,
    74,288,
    73,289,
    72,290,
    71,291,
    70,292,
    69,293,
    68,294,
    67,295,
    66,296,
    65,297,
    64,298,
    63,299,
    62,300,
    61,301,
    60,302,
    59,303,
    58,304,
    57,305,
    56,306,
    55,307,
    54,308,
    53,309,
    52,310,
    51,311,
    50,312,
    49,313,
    48,314,
    47,315,
    46,316,
    45,317,
    44,318,
    43,319,
    42,320,
    41,321,
    40,322,
    39,323,
    38,324,
    37,325,
    36,326,
    35,327,
    34,328,
    33,329,
    32,330,
    31,331,
    30,332,
    29,333,
    28,334,
    27,335,
    26,336,
    25,337,
    24,338,
    23,339,
    22,340,
    21,341,
    20,342,
    19,343,
    18,344,
    17,345,
    16,346,
    15,347,
    14,348,
    13,349,
    12,350,
    11,351,
    10,352,
    9,353,
    8,354,
    7,355,
    6,356,
    5,357,
    4,358,
    3,359,
    2,360,
    1,361,
    0,362,
    255,363,
    254,364,
    253,365,
    252,366,
    251,367,
    250,368,
    249,369,
    248,370,
    247,371,
    246,372,
    245,373,
    244,374,
    243,375,
    242,376,
    241,377,
    240,378,
    239,379,
    238,380,
    237,381,
    236,382,
    235,383,
    234,384,
    233,385,
    232,386,
    231,387,
    230,388,
    229,389,
    228,390,
    227,391,
    226,392,
    225,393,
    224,394,
    223,395,
    222,396,
    221,397,
    220,398,
    219,399,
    218,400,
    217,401,
    216,402,
    215,403,
    214,404,
    213,405,
    212,406,
    211,407,
    210,408,
    209,409,
    208,410,
    207,411,
    206,412,
    205,413,
    204,414,
    203,415,
    202,416,
    201,417,
    200,418,
    199,419,
    198,420,
    197,421,
    196,422,
    195,423,
    194,424,
    193,425,
    192,426,
    191,427,
    190,428,
    189,429,
    188,430,
    187,431,
    186,432,
    185,433,
    184,434,
    183,435,
    182,436,
    181,437,
    180,438,
    179,439,
    178,440,
    177,441,
    176,442,
    175,443,
    174,444,
    173,445,
    172,446,
    171,447,
    170,448,
    169,449,
    168,450,
    167,451,
    166,452,
    165,453,
    164,454,
    163,455,
    162,456,
    161,457,
    160,458,
    159,459,
    158,460,
    157,461,
    156,462,
    155,463,
    154,464,
    153,465,
    152,466,
    151,467,
    150,468,
    149,469,
    148,470,
    147,471,
    146,472,
    145,473,
    144,474,
    143,475,
    142,476,
    141,477,
    140,478,
    139,479,
    138,480,
    137,481,
    136,482,
    135,483,
    134,484,
    133,485,
    132,486,
    131,487,
    130,488,
    129,489,
    128,490,
    127,491,
    126,492,
    125,493,
    124,494,
    123,495,
    122,496,
    121,497,
    120,498,
    119,499,
    118,500,
    117,501,
    116,502,
    115,503,
    114,504,
    113,505,
    112,506,
    111,507,
    110,508,
    109,509,
    108,510,
    107,511,
    105,512,
    104,513,
    103,514,
    102,515,
    101,516,
    100,517,
    99,518,
    98,519,
    97,520,
    96,521,
    95,522,
    94,523,
    93,524,
    92,525,
    91,526,
    90,527,
    89,528,
    88,529,
    87,530,
    86,531,
    85,532,
    84,533,
    83,534,
    82,535,
    81,536,
    80,537,
    79,538,
    78,539,
    77,540,
    76,541,
    75,542,
    74,543,
    73,544,
    72,545,
    71,546,
    70,547,
    69,548,
    68,549,
    67,550,
    66,551,
    65,552,
    64,553,
    63,554,
    62,555,
    61,556,
    60,557,
    59,558,
    58,559,
    57,560,
    56,561,
    55,562,
    54,563,
    53,564,
    52,565,
    51,566,
    50,567,
    49,568,
    48,569,
    47,570,
    46,571,
    45,572,
    44,573,
    43,574,
    42,575,
    41,576,
    40,577,
    39,578,
    38,579,
    37,580,
    36,581,
    35,582,
    34,583,
    33,584,
    32,585,
    31,586,
    30,587,
    29,588,
    28,589,
    27,590,
    26,591,
    25,592,
    24,593,
    23,594,
    22,595,
    21,596,
    20,597,
    19,598,
    18,599,
    17,600,
    16,601,
    15,602,
    14,603,
    13,604,
    12,605,
    11,606,
    10,607,
    9,608,
    8,609,
    7,610,
    6,611,
    5,612,
    4,613,
    3,614,
    2,615,
    1,616,
    0,617,
    255,618,
    254,619,
    253,620,
    252,621,
    251,622,
    250,623,
    249,624,
    248,625,
    247,626,
    246,627,
    245,628,
    244,629,
    243,630,
    242,631,
    241,632,
    240,633,
    239,634,
    238,635,
    237,636,
    236,637,
    235,638,
    234,639,
    233,640,
    232,641,
    231,642,
    230,643,
    229,644,
    228,645,
    227,646,
    226,647,
    225,648,
    224,649,
    223,650,
    222,651,
    221,652,
    220,653,
    219,654,
    218,655,
    217,656,
    216,657,
    215,658,
    214,659,
    213,660,
    212,661,
    211,662,
    210,663,
    209,664,
    208,665,
    207,666,
    206,667,
    205,668,
    204,669,
    203,670,
    202,671,
    201,672,
    200,673,
    199,674,
    198,675,
    197,676,
    196,677,
    195,678,
    194,679,
    193,680,
    192,681,
    191,682,
    190,683,
    189,684,
    188,685,
    187,686,
    186,687,
    185,688,
    184,689,
    183,690,
    182,691,
    181,692,
    180,693,
    179,694,
    178,695,
    177,696,
    176,697,
    175,698,
    174,699,
    173,700,
    172,701,
    171,702,
    170,703,
    169,704,
    168,705,
    167,706,
    166,707,
    165,708,
    164,709,
    163,710,
    162,711,
    161,712,
    160,713,
    159,714,
    158,715,
    157,716,
    156,717,
    155,718,
    154,719,
    153,720,
    152,721,
    151,722,
    150,723,
    149,724,
    148,725,
    147,726,
    146,727,
    145,728,
    144,729,
    143,730,
    142,731,
    141,732,
    140,733,
    139,734,
    138,735,
    137,736,
    136,737,
    135,738,
    134,739,
    133,740,
    132,741,
    131,742,
    130,743,
    129,744,
    128,745,
    127,746,
    126,747,
    125,748,
    124,749,
    123,750,
    122,751,
    121,752,
    120,753,
    119,754,
    118,755,
    117,756,
    116,757,
    115,758,
    114,759,
    113,760,
    112,761,
    111,762,
    110,763,
    109,764,
    108,765,
    107,766,
    106,767,
    104,768,
    103,769,
    102,770,
    101,771,
    100,772,
    99,773,
    98,774,
    97,775,
    96,776,
    95,777,
    94,778,
    93,779,
    92,780,
    91,781,
    90,782,
    89,783,
    88,784,
    87,785,
    86,786,
    85,787,
    84,788,
    83,789,
    82,790,
    81,791,
    80,792,
    79,793,
    78,794,
    77,795,
    76,796,
    75,797,
    74,798,
    73,799,
    72,800,
    71,801,
    70,802,
    69,803,
    68,804,
    67,805,
    66,806,
    65,807,
    64,808,
    63,809,
    62,810,
    61,811,
    60,812,
    59,813,
    58,814,
    57,815,
    56,816,
    55,817,
    54,818,
    53,819,
    52,820,
    51,821,
    50,822,
    49,823,
    48,824,
    47,825,
    46,826,
    45,827,
    44,828,
    43,829,
    42,830,
    41,831,
    40,832,
    39,833,
    38,834,
    37,835,
    36,836,
    35,837,
    34,838,
    33,839,
    32,840,
    31,841,
    30,842,
    29,843,
    28,844,
    27,845,
    26,846,
    25,847,
    24,848,
    23,849,
    22,850,
    21,851,
    20,852,
    19,853,
    18,854,
    17,855,
    16,856,
    15,857,
    14,858,
    13,859,
    12,860,
    11,861,
    10,862,
    9,863,
    8,864,
    7,865,
    6,866,
    5,867,
    4,868,
    3,869,
    2,870,
    1,871,
    0,872,
    255,873,
    254,874,
    253,875,
    252,876,
    251,877,
    250,878,
    249,879,
    248,880,
    247,881,
    246,882,
    245,883,
    244,884,
    243,885,
    242,886,
    241,887,
    240,888,
    239,889,
    238,890,
    237,891,
    236,892,
    235,893,
    234,894,
    233,895,
    232,896,
    231,897,
    230,898,
    229,899,
    228,900,
    227,901,
    226,902,
    225,903,
    224,904,
    223,905,
    222,906,
    221,907,
    220,908,
    219,909,
    218,910,
    217,911,
    216,912,
    215,913,
    214,914,
    213,915,
    212,916,
    211,917,
    210,918,
    209,919,
    208,920,
    207,921,
    206,922,
    205,923,
    204,924,
    203,925,
    202,926,
    201,927,
    200,928,
    199,929,
    198,930,
    197,931,
    196,932,
    195,933,
    194,934,
    193,935,
    192,936,
    191,937,
    190,938,
    189,939,
    188,940,
    187,941,
    186,942,
    185,943,
    184,944,
    183,945,
    182,946,
    181,947,
    180,948,
    179,949,
    178,950,
    177,951,
    176,952,
    175,953,
    174,954,
    173,955,
    172,956,
    171,957,
    170,958,
    169,959,
    168,960,
    167,961,
    166,962,
    165,963,
    164,964,
    163,965,
    162,966,
    161,967,
    160,968,
    159,969,
    158,970,
    157,971,
    156,972,
    155,973,
    154,974,
    153,975,
    152,976,
    151,977,
    150,978,
    149,979,
    148,980,
    147,981,
    146,982,
    145,983,
    144,984,
    143,985,
    142,986,
    141,987,
    140,988,
    139,989,
    138,990,
    137,991,
    136,992,
    135,993,
    134,994,
    133,995,
    132,996,
    131,997,
    130,998,
    129,999,
    128,1000,
    127,1001,
    126,1002,
    125,1003,
    124,1004,
    123,1005,
    122,1006,
    121,1007,
    120,1008,
    119,1009,
    118,1010,
    117,1011,
    116,1012,
    115,1013,
    114,1014,
    113,1015,
    112,1016,
    111,1017,
    110,1018,
    109,1019,
    108,1020,
    107,1021,
    106,1022,
    105,1023,
    103,1024,
    102,1025,
    101,1026,
    100,1027,
    99,1028,
    98,1029,
    97,1030,
    96,1031,
    95,1032,
    94,1033,
    93,1034,
    92,1035,
    91,1036,
    90,1037,
    89,1038,
    88,1039,
    87,1040,
    86,1041,
    85,1042,
    84,1043,
    83,1044,
    82,1045,
    81,1046,
    80,1047,
    79,1048,
    78,1049,
    77,1050,
    76,1051,
    75,1052,
    74,1053,
    73,1054,
    72,1055,
    71,1056,
    70,1057,
    69,1058,
    68,1059,
    67,1060,
    66,1061,
    65,1062,
    64,1063,
    63,1064,
    62,1065,
    61,1066,
    60,1067,
    59,1068,
    58,1069,
    57,1070,
    56,1071,
    55,1072,
    54,1073,
    53,1074,
    52,1075,
    51,1076,
    50,1077,
    49,1078,
    48,1079,
    47,1080,
    46,1081,
    45,1082,
    44,1083,
    43,1084,
    42,1085,
    41,1086,
    40,1087,
    39,1088,
    38,1089,
    37,1090,
    36,1091,
    35,1092,
    34,1093,
    33,1094,
    32,1095,
    31,1096,
    30,1097,
    29,1098,
    28,1099,
    27,1100,
    26,1101,
    25,1102,
    24,1103,
    23,1104,
    22,1105,
    21,1106,
    20,1107,
    19,1108,
    18,1109,
    17,1110,
    16,1111,
    15,1112,
    14,1113,
    13,1114,
    12,1115,
    11,1116,
    10,1117,
    9,1118,
    8,1119,
    7,1120,
    6,1121,
    5,1122,
    4,1123,
    3,1124,
    2,1125,
    1,1126,
    0,1127,
    255,1128,
    254,1129,
    253,1130,
    252,1131,
    251,1132,
    250,1133,
    249,1134,
    248,1135,
    247,1136,
    246,1137,
    245,1138,
    244,1139,
    243,1140,
    242,1141,
    241,1142,
    240,1143,
    239,1144,
    238,1145,
    237,1146,
    236,1147,
    235,1148,
    234,1149,
    233,1150,
    232,1151,
    231,1152,
    230,1153,
    229,1154,
    228,1155,
    227,1156,
    226,1157,
    225,1158,
    224,1159,
    223,1160,
    222,1161,
    221,1162,
    220,1163,
    219,1164,
    218,1165,
    217,1166,
    216,1167,
    215,1168,
    214,1169,
    213,1170,
    212,1171,
    211,1172,
    210,1173,
    209,1174,
    208,1175,
    207,1176,
    206,1177,
    205,1178,
    204,1179,
    203,1180,
    202,1181,
    201,1182,
    200,1183,
    199,1184,
    198,1185,
    197,1186,
    196,1187,
    195,1188,
    194,1189,
    193,1190,
    192,1191,
    191,1192,
    190,1193,
    189,1194,
    188,1195,
    187,1196,
    186,1197,
    185,1198,
    184,1199,
    183,1200,
    182,1201,
    181,1202,
    180,1203,
    179,1204,
    178,1205,
    177,1206,
    176,1207,
    175,1208,
    174,1209,
    173,1210,
    172,1211,
    171,1212,
    170,1213,
    169,1214,
    168,1215,
    167,1216,
    166,1217,
    165,1218,
    164,1219,
    163,1220,
    162,1221,
    161,1222,
    160,1223,
    159,1224,
    158,1225,
    157,1226,
    156,1227,
    155,1228,
    154,1229,
    153,1230,
    152,1231,
    151,1232,
    150,1233,
    149,1234,
    148,1235,
    147,1236,
    146,1237,
    145,1238,
    144,1239,
    143,1240,
    142,1241,
    141,1242,
    140,1243,
    139,1244,
    138,1245,
    137,1246,
    136,1247,
    135,1248,
    134,1249,
    133,1250,
    132,1251,
    131,1252,
    130,1253,
    129,1254,
    128,1255,
    127,1256,
    126,1257,
    125,1258,
    124,1259,
    123,1260,
    122,1261,
    121,1262,
    120,1263,
    119,1264,
    118,1265,
    117,1266,
    116,1267,
    115,1268,
    114,1269,
    113,1270,
    112,1271,
    111,1272,
    110,1273,
    109,1274,
    108,1275,
    107,1276,
    106,1277,
    105,1278,
    104,1279,
    102,1280,
    101,1281,
    100,1282,
    99,1283,
    98,1284,
    97,1285,
    96,1286,
    95,1287,
    94,1288,
    93,1289,
    92,1290,
    91,1291,
    90,1292,
    89,1293,
    88,1294,
    87,1295,
    86,1296,
    85,1297,
    84,1298,
    83,1299,
    82,1300,
    81,1301,
    80,1302,
    79,1303,
    78,1304,
    77,1305,
    76,1306,
    75,1307,
    74,1308,
    73,1309,
    72,1310,
    71,1311,
    70,1312,
    69,1313,
    68,1314,
    67,1315,
    66,1316,
    65,1317,
    64,1318,
    63,1319,
    62,1320,
    61,1321,
    60,1322,
    59,1323,
    58,1324,
    57,1325,
    56,1326,
    55,1327,
    54,1328,
    53,1329,
    52,1330,
    51,1331,
    50,1332,
    49,1333,
    48,1334,
    47,1335,
    46,1336,
    45,1337,
    44,1338,
    43,1339,
    42,1340,
    41,1341,
    40,1342,
    39,1343,
    38,1344,
    37,1345,
    36,1346,
    35,1347,
    34,1348,
    33,1349,
    32,1350,
    31,1351,
    30,1352,
    29,1353,
    28,1354,
    27,1355,
    26,1356,
    25,1357,
    24,1358,
    23,1359,
    22,1360,
    21,1361,
    20,1362,
    19,1363,
    18,1364,
    17,1365,
    16,1366,
    15,1367,
    14,1368,
    13,1369,
    12,1370,
    11,1371,
    10,1372,
    9,1373,
    8,1374,
    7,1375,
    6,1376,
    5,1377,
    4,1378,
    3,1379,
    2,1380,
    1,1381,
    0,1382,
    255,1383,
    254,1384,
    253,1385,
    252,1386,
    251,1387,
    250,1388,
    249,1389,
    248,1390,
    247,1391,
    246,1392,
    245,1393,
    244,1394,
    243,1395,
    242,1396,
    241,1397,
    240,1398,
    239,1399,
    238,1400,
    237,1401,
    236,1402,
    235,1403,
    234,1404,
    233,1405,
    232,1406,
    231,1407,
    230,1408,
    229,1409,
    228,1410,
    227,1411,
    226,1412,
    225,1413,
    224,1414,
    223,1415,
    222,1416,
    221,1417,
    220,1418,
    219,1419,
    218,1420,
    217,1421,
    216,1422,
    215,1423,
    214,1424,
    213,1425,
    212,1426,
    211,1427,
    210,1428,
    209,1429,
    208,1430,
    207,1431,
    206,1432,
    205,1433,
    204,1434,
    203,1435,
    202,1436,
    201,1437,
    200,1438,
    199,1439,
    198,1440,
    197,1441,
    196,1442,
    195,1443,
    194,1444,
    193,1445,
    192,1446,
    191,1447,
    190,1448,
    189,1449,
    188,1450,
    187,1451,
    186,1452,
    185,1453,
    184,1454,
    183,1455,
    182,1456,
    181,1457,
    180,1458,
    179,1459,
    178,1460,
    177,1461,
    176,1462,
    175,1463,
    174,1464,
    173,1465,
    172,1466,
    171,1467,
    170,1468,
    169,1469,
    168,1470,
    167,1471,
    166,1472,
    165,1473,
    164,1474,
    163,1475,
    162,1476,
    161,1477,
    160,1478,
    159,1479,
    158,1480,
    157,1481,
    156,1482,
    155,1483,
    154,1484,
    153,1485,
    152,1486,
    151,1487,
    150,1488,
    149,1489,
    148,1490,
    147,1491,
    146,1492,
    145,1493,
    144,1494,
    143,1495,
    142,1496,
    141,1497,
    140,1498,
    139,1499,
    138,1500
};

void pbin(unsigned char x)
{
	static unsigned char bits[]={ 128, 64, 32, 16, 8, 4, 2, 1 };
	int i;
	for (i=0; i<8; i++)
		printf("%c", ((x&bits[i]) == bits[i]) ? '1' : '0');

}

unsigned char reverse(unsigned char byte)
{
	char reverse=0;
	reverse |= byte&1   ? 128 : 0;
	reverse |= byte&2   ? 64  : 0;
	reverse |= byte&4   ? 32  : 0;
	reverse |= byte&8   ? 16  : 0;
	reverse |= byte&16  ? 8   : 0;
	reverse |= byte&32  ? 4   : 0;
	reverse |= byte&64  ? 2   : 0;
	reverse |= byte&128 ? 1  : 0;
	return reverse;
}
int _tmain(int argc, _TCHAR* argv[])
{
	HANDLE COM3;           // file descriptor for reading from com3
	DCB COM3_SETTINGS;     // serial port settings baud rate et al
	COMMTIMEOUTS timeouts; // timeout settings on serial ports
	INT rc; 
	DWORD cBytes;
	int sensors=0;

	int heartrate=0, power=0, cadence=0;
	double speed=0.0;

	// win32 commport API
	COM3 = CreateFile (TEXT ("COM6:"), GENERIC_READ|GENERIC_WRITE, 
		FILE_SHARE_DELETE|FILE_SHARE_WRITE|FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);

	if (COM3 == INVALID_HANDLE_VALUE) {
		fprintf(stderr, "ERROR: Cannot open COM3:\n");
		exit (2);
	}

	// set it all up
	BYTE ERGMODEpreamble[] = { 
						0x6D, 0x00, 0x00, 0x0A, 0x08, 0x00, 0xE0,
						0x65, 0x00, 0x00, 0x0A, 0x10, 0x00, 0xE0,
						0x00, 0x00, 0x00, 0x0A, 0x18, 0x5D, 0xC1,
						0x33, 0x00, 0x00, 0x0A, 0x24, 0x1E, 0xE0,
						0x6A, 0x00, 0x00, 0x0A, 0x2C, 0x5F, 0xE0,
						0x41, 0x00, 0x00, 0x0A, 0x34, 0x00, 0xE0,
						0x2D, 0x00, 0x00, 0x0A, 0x38, 0x10, 0xC2,
						0x03, 0x00, 0x00, 0x0A, 0x40, 0x32, 0xE0, // this is the load setting and is overwritten
						                                          // when the user presses up or down 100w and a
																  // supplement of 7 (shifted out)
						0xFF };

	
	int load = 100; // initial load

	if (GetCommState (COM3, &COM3_SETTINGS) == false) {
		fprintf(stderr, "ERROR: Cannot get device settings from COM3:\n");
		exit (2);
	}

	// so we've opened the comm port lets set it up for
	// 2400 baud - done
	// 8 bits, -done 
	// 1 stop bit - done
	// no parity - done
	// use cts/rts flow control
	// lets set to our needs then.....
	COM3_SETTINGS.BaudRate = CBR_2400;
	COM3_SETTINGS.fParity = NOPARITY;
	COM3_SETTINGS.ByteSize = 8;
	COM3_SETTINGS.StopBits = ONESTOPBIT;
	COM3_SETTINGS.EofChar = 0x0;
	COM3_SETTINGS.ErrorChar = 0x0;
	COM3_SETTINGS.EvtChar = 0x0;
	COM3_SETTINGS.fBinary = true;
    COM3_SETTINGS.fRtsControl = RTS_CONTROL_HANDSHAKE;
    COM3_SETTINGS.fOutxCtsFlow = TRUE;


	if (SetCommState(COM3, &COM3_SETTINGS) == false) {
		fprintf(stderr, "ERROR: Cannot set device settings for COM3:\n");
		exit (2);
	}

	// and those timeouts...
	//ReadIntervalTimeout=0
	//ReadTotalTimeoutMultiplier=5
	//ReadTotalTimeoutConstant=1000
	//WriteTotalTimeoutMultiplier=0
	//WriteTotalTimeoutConstant=2000
	timeouts.ReadIntervalTimeout = 0;
	timeouts.ReadTotalTimeoutConstant = 1000;
	timeouts.ReadTotalTimeoutMultiplier = 50;
	timeouts.WriteTotalTimeoutConstant = 2000;
	timeouts.WriteTotalTimeoutMultiplier = 0;
	SetCommTimeouts(COM3, &timeouts);

	// output to get things started
	rc = WriteFile(COM3, &ERGMODEpreamble, 7*8, &cBytes, NULL);

	// read 7 bytes of data
	int first = 1;
	BYTE initial;
	int initalHR=0;
	int record=0;
	int ssv[24];
	int ss=0;
	unsigned short vals[255]; // for each packet type store the last value

	for (int i=0; i<255; vals[i++] = 0);
	for (int i=0; i<24; ssv[i++]=0);

#ifdef DEBUG
	printf("original: %02x %02x %02x %02x %02x %02x %02x\n",
	ERGMODEpreamble[49],
	ERGMODEpreamble[50],
	ERGMODEpreamble[51],
	ERGMODEpreamble[52],
	ERGMODEpreamble[53],
	ERGMODEpreamble[54],
	ERGMODEpreamble[55]);
#endif

	// so first 3 bytes are all zero - scream if ever they are not!
	// forth defines state of buttons - lets watch them change
	// fifth is packet type,
	while (true) {
		BYTE line[7];
		unsigned short *sv = (unsigned short *)&line[5];


		rc = ReadFile(COM3, &line, 7, &cBytes, NULL);
		record++;

		while ((line[6]&128) == 0 && cBytes) { // need to resync
			ReadFile(COM3, &line[6], 1, &cBytes, NULL);
		}

		// just dump every record
		if (0 /* && ((line[4]&~7)==0x20 || 
			      (line[4]&~7)==0x28 || 
				  (line[4]&~7)==0x38 ||
				  (line[4]&~7)==0x40 ||
				  (line[4]&~7)==0x50)*/) {
			int val,i;
			int shifts[]={ 2,1,0 };
		// spin scan record!
			fprintf(stdout, "%d: ", record);

			// lets do the bit stuff first 
			for (int i=0; i<7; i++) { pbin(line[i]); putchar(' '); }
			for (int i=0; i<3; i++) {
				line[i] <<= 1;
				line[i] |= (line[6]&(32>>i)) ? 1 : 0;
			}

			for (int i=0; i<7; i++) fprintf(stdout, "%02x ", line[i]);
			printf("%02x ", line[4]&~7); // type
							val = (line[5]&~128)<<1 | (line[6]&1); // 8 bit values
			printf("%d ", val);
			val |= (line[4]&7)<<9 | (line[6]&2)<<7;
			printf("%d ", val);
			//for (int i=0; i<7; i++) if (line[i]&128) putchar('!'); else putchar('-');
			//if (line[6]&4) printf(" Z2! ");			

			// only for line[0] show as 5bits then 8 bits
			printf("%03d %03d ", line[0]>>3, line[0]&7);

			// ss stuff
			if ((line[3]&32) == 0x20) {
					int i=0,tot = 0;
					for (int i=0; i<24; i++) {
						printf("%03d ", ssv[i]);
						tot += ssv[i];
						ssv[i]=0;
						
					}
					printf("Total %d", tot);
					ss=0; // reset the marker
				}
				i=0;
				while (ss<24 && i<3) {
					if (line[i] != 0xf7) {
						ssv[ss] = line[i];
					} else 
						ssv[ss] = 0;
					ss++; i++;
				}		
			fprintf(stdout, "\n");
			goto next;
			
		} 

		// if first output byte[4] & set initial value
		if (cBytes == 7) {

			// flag up if hibit used
/*			for (int i=0; i<8; i++) if (line[i]&128) 
				printf("Hi bit used type %x, byte %d, %02x!\n", line[4]&~7, i, line[i]);
*/
			// first 3 bytes used?
			if (line[0] || line [1] || line [2]) {
				unsigned int val;
				char *type, buf[3];

				// spin scan record!
				fprintf(stdout, "%d: ", record);
				for (int i=0; i<7; i++) { pbin(line[i]); putchar(' '); }
				for (int i=0; i<7; i++) fprintf(stdout, "%02x ", line[i]);	
				switch(line[4]&~7) {

					case 0x08 : type = "Speed"; break;
					case 0x10 : type = "Power"; break;
					case 0x18 : type = "Heart Rate"; break;
					case 0x30 : type = "Cadence"; break;
					case 0x48 : type = "Calibration Pressure"; break; 
					case 0x58 : type = "Status"; break;
					default : 
						type = &buf[0]; 
						sprintf_s(buf, "%02x", line[4]&~7); break;
				}
				printf(" %s ", type);

				if ((line[4]&~7) == 0x40) { // spinscan?
					val = (line[5]&~128);
					printf("SS=%d ", val);
				} else if ((line[4]&~7) == 0x48) {
					double rrc;
					val = (line[5]&~128)<<1 | (line[6]&1); // 8 bit values
					val |= (line[4]&3)<<9 | (line[6]&2)<<7;
					rrc = (double) val / 256;

					printf("%s RRC=%3.2f", (line[4]&4) ? "Calibrated" : "Uncalibrated", rrc);

				} else if ((line[4]&~7) == 0x58) { // sensor status
					sensors = line[4];
					printf("HR %s ", line[4] & 2 ? "Connected" : "Disconnected");
					printf("Cad %s", line[4] & 4 ? "Connected" : "Disconnected");
				} else {
				val = (line[5]&~128)<<1 | (line[6]&1); // 8 bit values
				printf("%d ", val);
				val |= (line[4]&7)<<9 | (line[6]&2)<<7;
				printf("%d ", val);
				}
		
				if ((line[3]&32) == 0x20) {

					for (int i=0; i<24; i++) {
						printf("%03d ", ssv[i]);
						ssv[i]=0;
					}
					printf("\r");
					ss=0; // reset the marker
				}
				int i=0;
				while (ss<24 && i<3) {
					if (line[i] != 0x7b) {
						ssv[ss] = line[i]<<1; // 7 bit value
						ssv[ss] |= ((line[6]&(32>>i)) ? 1 : 0); // take lsb from byte 6
						// now it encoded 5bit x 3bit ?
						// ssv[ss] = ((ssv[ss]&(128+64+32+16+8))>>3) * (ssv[ss]&(4+2+1));
					} else 
						ssv[ss] = 0;
					ss++; i++;
				}		
//				for (int i=0; i<7; i++) if (line[i]&128) putchar('!'); else putchar('-');
//			if (line[6]&4) printf(" Z2! ");		fprintf(stdout, "\n");				
	
			} else {

			// buttons are in byte 4
			if (first == 1) {
				initial = line[3]; // track buttons
				first++;
			} else if (initial != line[3]) { // a button was pressed
//				fprintf(stdout, "%d: changed %02x\n", record, line[3]);
			}
			// sensors attached?
			if ((line[4]&~7) == 0x58 && sensors !=line[4]) { // sensor status
					sensors = line[4];
//					printf("HR is %s ", line[4] & 2 ? "Connected" : "Disconnected");
//					printf("Cadence is %s\n", line[4] & 4 ? "Connected" : "Disconnected");
			}

			if (line[3]&4) load++;
			if (line[3]&16) load--;


			// Packet type is in top5 bits of byte 5
			// value is somehow packed in byte 6 and 7
			
			if (vals[line[4]&~7] != *sv /* && (line[4]&~7)==0x08*/) {
				char *type; char buf[20];
				// type
				switch(line[4]&~7) {

					case 0x08 : type = "Speed"; break;
					case 0x10 : type = "Power"; break;
					case 0x18 : type = "Heart Rate"; break;
					case 0x30 : type = "Cadence"; break;
					case 0x48 : type = "Calibration Pressure"; break; // whoa! it IS available!!!
					case 0x58 : type = "Status"; break;
					default : 
						type = &buf[0]; 
						sprintf_s(buf, "%02x", line[4]&~7); break;
				}
				// new value
				vals[line[4]&~7]= *sv;
/*				printf("%s: ", type);
				pbin(line[4]);
				printf(" ");
				pbin(line[5]);
				printf(" ");
				pbin(line[6]);
*/				short b1 = line[4];
				short b2 = line[5];
				short b3 = line[6];
				unsigned int val;
				val = (b2&~128)<<1 | (b3&1); // 8 bit values
				if ((line[4]&~7) == 0x08) { // speed is 12 bits
					double kph; int mps;
					val |= (b1&7)<<9 | (b3&2)<<7;
					mps = val;
					val *=36;
					val *=9;
					val /=10; // seems that compcs takes off 10% ?
					kph = val;
					kph /= 1000;
//					printf(" %2.4g kph (%d mps)", kph, mps);
					speed = kph;
				} else if ((line[4]&~7) == 0x10) { // power is 12 bits no conversion
					val |= (b1&7)<<9 | (b3&2)<<7;
//					printf(" %d watts", val);
					power = val;
				} else if ((line[4]&~7) == 0x48) { // the rest are assumed 8 bit
					double rrc;
					val = (line[5]&~128)<<1 | (line[6]&1); // 8 bit values
					val |= (line[4]&3)<<9 | (line[6]&2)<<7;
					rrc = (double) val / 256;

//					printf("%s RRC=%3.2f\n", (line[4]&4) ? "Calibrated" : "Uncalibrated", rrc);
				} else  {
					if ((line[4]&~7) == 0x18) heartrate = val;
					if ((line[4]&~7) == 0x30) cadence = val;
				}
//				for (int i=0; i<7; i++) if (line[i]&128) putchar('!'); else putchar('-');
			    if (line[6]&4) printf(" Z2! \n");		
				printf("HR: %03d SPEED: %03.3f CAD: %03d POWER: %03d LOAD: %04d \r", heartrate, speed, cadence, power, load);
			}
		
			}

		} else {
//			fprintf(stdout, "%d: No data\n", record);
			Sleep(100);
		}
next:;
		// send some more guff to keep the CT responding
		if (record%10 == 0) {
				
				// BYTE 0 - 49 is b0, 53 is b4, 54 is b5, 55 is b6
			    ERGMODEpreamble[49] = CTLoadTable[load].supplement >> 1; // set byte 0

				// BYTE 4 - command and highbyte 
				ERGMODEpreamble[53]  = 0x40; // set command
				ERGMODEpreamble[53] |= (load&(2048+1024+512)) >> 9;

				// BYTE 5 - low 7
				ERGMODEpreamble[54] = 0;
				ERGMODEpreamble[54] |= (load&(128+64+32+16+8+4+2)) >> 1;

				// BYTE 6 - sync + z set
				ERGMODEpreamble[55] = 128+64;

				// low bit of supplement in bit 6 (32)
				ERGMODEpreamble[55] |= CTLoadTable[load].supplement & 1 ? 32 : 0;
				// Bit 2 (0x02) is low bit of high byte in load (bit 9 0x256)
				ERGMODEpreamble[55] |= (load&256) ? 2 : 0;
				// Bit 1 (0x01) is low bit of low byte in load (but 1 0x01)
				ERGMODEpreamble[55] |= load&1;
#ifdef DEBUG
				printf("output: %02x %02x %02x %02x %02x %02x %02x\n",
					ERGMODEpreamble[49],
					ERGMODEpreamble[50],
					ERGMODEpreamble[51],
					ERGMODEpreamble[52],
					ERGMODEpreamble[53],
					ERGMODEpreamble[54],
					ERGMODEpreamble[55]);
#endif
				rc = WriteFile(COM3, &ERGMODEpreamble, 7*8, &cBytes, NULL);
		}
	}

	// close
	CloseHandle (COM3);
	return 0;
}

